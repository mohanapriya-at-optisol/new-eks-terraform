name: Terraform Deploy Non Interactive

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: [self-hosted, linux, x64]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      GITHUB_ENVIRONMENT: ${{ secrets.TF_ENVIRONMENT }}
      GITHUB_REGION: ${{ secrets.AWS_REGION }}
      GITHUB_AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
      GITHUB_TF_BUCKET: ${{ secrets.TF_S3_BUCKET }}
      GITHUB_TF_DDB_TABLE: ${{ secrets.TF_DDB_TABLE }}
      GITHUB_CLUSTER_NAME: ${{ secrets.TF_CLUSTER_NAME }}
      GITHUB_CLUSTER_VERSION: ${{ secrets.CLUSTER_VERSION }}
      GITHUB_VPC_CIDR: ${{ secrets.TF_VPC_CIDR }}
      GITHUB_NODE_GROUP_NAME: ${{ secrets.TF_NODE_GROUP_NAME }}
      GITHUB_INSTANCE_TYPE: ${{ secrets.TF_NODE_INSTANCE_TYPE }}
      GITHUB_MIN_SIZE: ${{ secrets.TF_MIN_SIZE }}
      GITHUB_MAX_SIZE: ${{ secrets.TF_MAX_SIZE }}
      GITHUB_DESIRED_SIZE: ${{ secrets.TF_DESIRED_SIZE }}
      GITHUB_DISK_SIZE: ${{ secrets.TF_DISK_SIZE }}
      GITHUB_PROJECT_NAME: ${{ secrets.TF_PROJECT_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Navigate to Terraform Directory
        run: |
          cd terraform-eks
          pwd
          ls -la
        working-directory: ${{ github.workspace }}

      - name: Install Terraform
        run: |
          if ! command -v terraform &> /dev/null; then
            # Remove existing keyring if present
            sudo rm -f /usr/share/keyrings/hashicorp-archive-keyring.gpg
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform -y
            echo "âœ… Terraform installed"
          else
            echo "âœ… Terraform already installed: $(terraform version)"
          fi

      - name: Ensure tf-admin AWS profile
        run: |
          if aws configure list-profiles | grep -q '^tf-admin$'; then
            echo "âœ… tf-admin profile already exists."
          else
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile tf-admin
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile tf-admin
            aws configure set region $AWS_DEFAULT_REGION --profile tf-admin
            echo "âœ… tf-admin profile created successfully."
          fi

      - name: Debug environment variables (masked)
        run: |
          echo "ðŸ’¡ Environment: $GITHUB_ENVIRONMENT"
          echo "ðŸ’¡ Region: $GITHUB_REGION"
          echo "ðŸ’¡ AWS Profile: $GITHUB_AWS_PROFILE"
          echo "ðŸ’¡ Secrets are properly loaded (values masked for security)"

      - name: Run Bootstrap Script
        run: |
          chmod +x setup-backend-noninteractive.sh
          ./setup-backend-noninteractive.sh
        working-directory: terraform-eks

      - name: Check Terraform Initialization
        run: |
          if [ ! -d ".terraform" ] || [ ! -f ".terraform/terraform.tfstate" ]; then
            echo "Terraform not initialized, running init..."
            terraform init -backend-config="backend-config/${{ secrets.TF_ENVIRONMENT }}.tfbackend"
          else
            echo "âœ… Terraform already initialized"
          fi
          
          # Ensure correct workspace
          CURRENT_WORKSPACE=$(terraform workspace show)
          if [ "$CURRENT_WORKSPACE" != "${{ secrets.TF_ENVIRONMENT }}" ]; then
            terraform workspace select ${{ secrets.TF_ENVIRONMENT }} || \
            terraform workspace new ${{ secrets.TF_ENVIRONMENT }}
          fi
        working-directory: terraform-eks

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform-eks

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="static.tfvars" \
            -var-file="envs/${{ secrets.TF_ENVIRONMENT }}.tfvars" \
            -out=tfplan.out
        working-directory: terraform-eks

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan.out
        working-directory: terraform-eks

      - name: Output EKS Cluster Info
        run: terraform output
        working-directory: terraform-eks
